{"mappings":"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","sources":["src/lib/ArrayBufferReader.js","src/lib/Entries/PaletteEntry.js","src/lib/Entries/ImageEntry.js","src/lib/Entries/TextEntry.js","src/lib/Entries/ZBufferEntry.js","src/lib/Entries/ResourceIdentifierEntry.js","src/lib/Entries/DefaultEntry.js","src/lib/Entries/FloatTableEntry.js","src/lib/Entries/IntTableEntry.js","src/lib/DATPARTOUT.js","src/lib/imgs.js","src/lib/EntryUtils.js"],"sourcesContent":["export class ArrayBufferReader {\r\n    /**\r\n     * Class for reading from an array buffer.\r\n     * @param {ArrayBuffer} buffer The array buffer.\r\n     */\r\n    constructor(buffer) {\r\n        this.buffer = buffer;\r\n        /**\r\n         * @type {Number}\r\n         */\r\n        this.pointer = 0;\r\n    }\r\n\r\n    /**\r\n     * Reads a number from the file.\r\n     * @param {Number} nBytes Number of bytes to read.\r\n     * @param {Boolean} advancePointer Whether to advance the file pointer or not.\r\n     * @returns {Number} The number.\r\n     */\r\n    readNumber(nBytes, advancePointer = true) {\r\n        return this.bytesToNumber(this.readBytes(nBytes, advancePointer));\r\n    }\r\n\r\n    /**\r\n     * Reads a float from the file.\r\n     * @param {Boolean} advancePointer Whether to advance the file pointer or not.\r\n     * @returns {Number} The float.\r\n     */\r\n    readFloat(advancePointer = true) {\r\n        const buffer = new ArrayBuffer(4);\r\n        const view = new DataView(buffer);\r\n        const bytes = this.readBytes(4, advancePointer);\r\n        for (const i in bytes) {\r\n            view.setUint8(i, bytes[i]);\r\n        }\r\n\r\n        return view.getFloat32(0, true);\r\n    }\r\n\r\n    /**\r\n     * Reads a string from the file.\r\n     * @param {Number} nBytes Number of bytes to read.\r\n     * @param {Boolean} advancePointer Whether to advance the file pointer or not.\r\n     * @returns {String} The string.\r\n     */\r\n    readString(nBytes, advancePointer = true) {\r\n        return this.bytesToString(this.readBytes(nBytes, advancePointer));\r\n    }\r\n\r\n    /**\r\n     * Reads bytes from the file.\r\n     * @param {Number} n Number of bytes to read.\r\n     * @param {Boolean} advancePointer Whether to advance the file pointer or not.\r\n     * @returns {Uint8Array} The bytes.\r\n     */\r\n    readBytes(n, advancePointer = true) {\r\n        const data = new Uint8Array(this.buffer.slice(this.pointer, this.pointer + n));\r\n        if (advancePointer) {\r\n            this.pointer += n;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * @param {Uint8Array} bytes\r\n     * @return {Number}\r\n     */\r\n    bytesToNumber(bytes) {\r\n        let result = 0;\r\n\r\n        for (let byte = 0; byte < bytes.length; byte++)\r\n            result += bytes[byte] << byte * 8;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @param {Array<Number>} charCodes\r\n     * @return {String}\r\n     */\r\n    bytesToString(charCodes) {\r\n        let result = \"\";\r\n        for (let i = 0; i < charCodes.length; i++)\r\n            result += String.fromCharCode(charCodes[i]);\r\n        return result;\r\n    }\r\n}\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class PaletteEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    constructor(reader) {\r\n        const nColors = reader.readNumber(4) / 4;\r\n\r\n        /**\r\n         * @type {{r: number, g: number, b: number, a: number}[]}\r\n         */\r\n        this.colors = [];\r\n\r\n        for (let color = 0; color < nColors; color++) {\r\n            this.colors[color] = {};\r\n            this.colors[color].b = reader.readNumber(1);\r\n            this.colors[color].g = reader.readNumber(1);\r\n            this.colors[color].r = reader.readNumber(1);\r\n            this.colors[color].a = reader.readNumber(1);\r\n        }\r\n    }\r\n}\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\nimport { PaletteEntry } from \"./PaletteEntry\";\r\n\r\nexport class ImageEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    constructor(reader) {\r\n        /** @type {Number} */\r\n        this.dataLength = reader.readNumber(4);\r\n        /** @type {Number} */\r\n        this.tableSize = reader.readNumber(1);\r\n        /** @type {Number} */\r\n        this.width = reader.readNumber(2);\r\n        /** @type {Number} */\r\n        this.height = reader.readNumber(2);\r\n        /** @type {Number} */\r\n        this.mp1 = reader.readNumber(2);\r\n        /** @type {Number} */\r\n        this.mp2 = reader.readNumber(2);\r\n        /** @type {Number} */\r\n        this.imageSize = reader.readNumber(4);\r\n        /** @type {Number} */\r\n        this.imageType = reader.readNumber(1);\r\n        /**\r\n         * The palette indexes for each pixel.\r\n         * @type {Uint8Array}\r\n         */\r\n        this.data = [];\r\n        /** @type {ImageData} */\r\n        this.imageData = new ImageData(this.width, this.height);\r\n        /** @type {Number[]} */\r\n        this.zBuffer = [];\r\n\r\n        if (this.imageType === 5) {\r\n            this.readAlphaChannelImage(reader);\r\n        } else {\r\n            this.readImage(reader);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    readImage(reader) {\r\n        const padding = Math.ceil(-((this.height * this.width - this.imageSize) / this.height));\r\n        const data = reader.readBytes(this.imageSize);\r\n\r\n        let byte = 0;\r\n        for (let v = this.height - 1; v >= 0; v--) {\r\n            for (let u = 0; u < this.width; u++, byte++) {\r\n                const index = u + v * this.width;\r\n                this.data[index] = data[byte];\r\n            }\r\n            byte += padding;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    readAlphaChannelImage(reader) {\r\n        const maxLine = this.tableSize == 0 ? 600 : this.tableSize == 1 ? 752 : 960;\r\n\r\n        let currentOffset = 0;\r\n\r\n        while (reader.readNumber(2, false) !== 0xFFFF) {\r\n            currentOffset += reader.readNumber(2);\r\n            const lineSize = reader.readNumber(2);\r\n\r\n            for (let i = 0; i < lineSize; i++) {\r\n                const dist = reader.readNumber(2);\r\n                const color = reader.readNumber(1);\r\n\r\n                const u = currentOffset % maxLine;\r\n                const v = (this.height - 1) - Math.floor(currentOffset / maxLine);\r\n                const index = u + v * this.width;\r\n                this.data[index] = color;\r\n                this.zBuffer[index] = dist;\r\n                currentOffset++;\r\n            }\r\n        }\r\n\r\n        reader.readNumber(2);\r\n    }\r\n\r\n    /**\r\n     * @param {PaletteEntry} palette\r\n     */\r\n    makeImageData(palette) {\r\n        for (const i in this.data) {\r\n            const pI = this.data[i];\r\n            const pExists = typeof pI !== 'undefined';\r\n            const index = i * 4;\r\n            const c = pExists ? palette.colors[pI] : { r: 0, g: 0, b: 0 };\r\n            this.imageData.data[index + 0] = c.r;\r\n            this.imageData.data[index + 1] = c.g;\r\n            this.imageData.data[index + 2] = c.b;\r\n            this.imageData.data[index + 3] = pExists ? 255 : 0;\r\n        }\r\n    }\r\n}\r\n\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class TextEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader \r\n     */\r\n    constructor(reader) {\r\n        const length = reader.readNumber(4);\r\n        this.text = reader.readString(length);\r\n        this.text = this.text.substring(0, length - 1);\r\n    }\r\n}","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class ZBufferEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    constructor(reader) {\r\n        this.dataLength = reader.readNumber(4);\r\n        this.tableSize = reader.readNumber(1);\r\n        this.width = reader.readNumber(2);\r\n        this.height = reader.readNumber(2);\r\n        this.fullWidth = reader.readNumber(2);\r\n        this.unk3 = reader.readNumber(4);\r\n        this.unk4 = reader.readNumber(2);\r\n        this.unk5 = reader.readNumber(2);\r\n        this.zBuffer = [];\r\n\r\n        const data = [];\r\n        for (let i = 0; i < this.fullWidth * this.height; i++) {\r\n            const dist = reader.readNumber(2);\r\n            if (i % this.fullWidth >= this.width) continue;\r\n            data.push(dist);\r\n        }\r\n\r\n        for (const i in data) {\r\n            const u = (i % this.width);\r\n            const v = this.height - 1 - Math.floor(i / this.width);\r\n            const index = v * this.width + u;\r\n\r\n            this.zBuffer.push(data[index]);\r\n        }\r\n    }\r\n}\r\n\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class ResourceIdentifierEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    constructor(reader) {\r\n        this.value = reader.readNumber(2);\r\n    }\r\n}","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class DefaultEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader \r\n     */\r\n    constructor(reader) {\r\n        const length = reader.readNumber(4);\r\n        this.data = reader.readBytes(length);\r\n    }\r\n}\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class FloatTableEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader \r\n     */\r\n    constructor(reader) {\r\n        this.dataLength = reader.readNumber(4);\r\n        /**\r\n         * @type {Number[]}\r\n         */\r\n        this.table = [];\r\n        const tableLength = this.dataLength / 4;\r\n        for (let i = 0; i < tableLength; i++) {\r\n            this.table.push(reader.readFloat());\r\n        }\r\n    }\r\n}","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class IntTableEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader \r\n     */\r\n    constructor(reader) {\r\n        this.dataLength = reader.readNumber(4);\r\n        const tableLength = this.dataLength / 2;\r\n        this.table = [];\r\n        for (let i = 0; i < tableLength; i++) {\r\n            this.table.push(reader.readNumber(2));\r\n        }\r\n    }\r\n}","/* Created by Jonas on 05.06.2015. */\r\n\r\nimport { ArrayBufferReader } from './ArrayBufferReader';\r\nimport { ImageEntry } from './Entries/ImageEntry';\r\nimport { PaletteEntry } from './Entries/PaletteEntry';\r\nimport { TextEntry } from './Entries/TextEntry';\r\nimport { ZBufferEntry } from './Entries/ZBufferEntry';\r\nimport { ResourceIdentifierEntry } from './Entries/ResourceIdentifierEntry';\r\nimport { DefaultEntry } from './Entries/DefaultEntry';\r\nimport { FloatTableEntry } from './Entries/FloatTableEntry';\r\nimport { IntTableEntry } from './Entries/IntTableEntry';\r\n\r\nexport class DATPARTOUT {\r\n\r\n    /**\r\n     * Reads a datpartout file.\r\n     * @param {ArrayBuffer} fileBuffer The data.\r\n     * @constructor\r\n     */\r\n    constructor(fileBuffer) {\r\n        this.dataURI = \"\";\r\n        this.header = {\r\n            signature: \"PARTOUT(4.0)RESOURCE\",\r\n            appName: \"\",\r\n            description: \"\",\r\n            fileSize: 0,\r\n            nGroups: 0,\r\n            tableSize: 0,\r\n            fullWidth: 0 // [4 bytes] unknown2 (some small integer, seen values 0 through 25)\r\n        };\r\n\r\n        const reader = new ArrayBufferReader(fileBuffer);\r\n\r\n        /**\r\n         * @type {Array.<Array>}\r\n         */\r\n        this.groups = [];\r\n\r\n        let palette;\r\n\r\n        reader.pointer = 21;\r\n        this.header.appName = reader.readString(50);\r\n        this.header.description = reader.readString(100);\r\n        this.header.fileSize = reader.readNumber(4);\r\n        this.header.nGroups = reader.readNumber(2);\r\n        this.header.tableSize = reader.readNumber(2);\r\n        this.header.fullWidth = reader.readNumber(4);\r\n\r\n        /**\r\n         * @type {{group: Number, entry: Number}[]}\r\n         */\r\n        const imageEntries = [];\r\n\r\n        for (let groupID = 0; groupID < this.header.nGroups; groupID++) {\r\n            const group = [];\r\n            const nEntries = reader.readNumber(1);\r\n            for (let entryID = 0; entryID < nEntries; entryID++) {\r\n                let entry;\r\n                const entryType = reader.readNumber(1);\r\n                switch (entryType) {\r\n                    case 0: // RESOURCE IDENTIFIER\r\n                        entry = new ResourceIdentifierEntry(reader);\r\n                        break;\r\n                    case 1: // IMAGE\r\n                        entry = new ImageEntry(reader);\r\n                        imageEntries.push({ group: groupID, entry: entryID });\r\n                        break;\r\n                    case 5: // PALETTE\r\n                        entry = new PaletteEntry(reader);\r\n                        palette = entry;\r\n                        break;\r\n                    case 3: // TEXT\r\n                    case 9: // TEXT2\r\n                        entry = new TextEntry(reader);\r\n                        break;\r\n                    case 10: // INT TABLE\r\n                        entry = new IntTableEntry(reader);\r\n                        break;\r\n                    case 11: // FLOAT TABLE\r\n                        entry = new FloatTableEntry(reader);\r\n                        break;\r\n                    case 12: // Z BUFFER DATA\r\n                        entry = new ZBufferEntry(reader);\r\n                        break;\r\n                    default:\r\n                        entry = new DefaultEntry(reader);\r\n                        break;\r\n                }\r\n                group.push(entry);\r\n            }\r\n            this.groups.push(group);\r\n        }\r\n\r\n        for (const e of imageEntries) {\r\n            /**\r\n             * @type {ImageEntry}\r\n             */\r\n            const entry = this.groups[e.group][e.entry];\r\n\r\n            entry.makeImageData(palette);\r\n        }\r\n    }\r\n}\r\n","import { DATPARTOUT } from \"./DATPARTOUT\";\r\nimport * as EntryUtils from \"./EntryUtils\"\r\nimport { ImageEntry } from \"./Entries/ImageEntry\";\r\nimport { ZBufferEntry } from \"./Entries/ZBufferEntry\";\r\nimport { TextEntry } from \"./Entries/TextEntry\";\r\n\r\n/**\r\n * Extracts the images from a DATPARTOUT file.\r\n * @param {DATPARTOUT} file The file.\r\n */\r\nfunction imageList(file) {\r\n    var listElm = document.createElement(\"div\");\r\n    var images = [];\r\n    file.groups.forEach(function (group, groupID) {\r\n        group.forEach(function (entry, entryID) {\r\n            if (entry instanceof ImageEntry || entry instanceof ZBufferEntry) {\r\n                images.push({\r\n                    entry: entry,\r\n                    entryID: entryID,\r\n                    group: group,\r\n                    groupID: groupID\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    let message = \"\";\r\n    let g = \"\";\r\n    let counter = 1;\r\n\r\n    images.filter(image => image.entry.tableSize === 2)\r\n        .forEach(function (image) {\r\n            let imageElm;\r\n            if (image.entry instanceof ImageEntry) {\r\n                imageElm = EntryUtils.paletteImgFromEntry(image.entry);\r\n                /** @type {TextEntry[]} */\r\n                const x = image.group.filter(e => e instanceof TextEntry);\r\n                if (x.length > 0) {\r\n                    const st = `{ name: \"${x[0].text}\", `;\r\n                    message += st;\r\n                    g = x[0].text;\r\n                    counter = 1;\r\n                } else {\r\n                    message += `{ name: \"${g}_${counter}\", `;\r\n                    counter++;\r\n                }\r\n                message += `group: ${image.groupID}, entry: ${image.entryID} }\\n`;\r\n            } else {\r\n                imageElm = EntryUtils.zBufferImgFromEntry(image.entry);\r\n            }\r\n            imageElm.title = `${image.groupID}-${image.entryID}`;\r\n            listElm.appendChild(imageElm);\r\n        });\r\n\r\n    console.log(message);\r\n\r\n    return listElm;\r\n}\r\n\r\nvar fileElm = document.getElementById(\"file\");\r\nvar imagesElm = document.getElementById(\"images\");\r\n\r\nfileElm.onchange = function () {\r\n    var f = fileElm.files[0],\r\n        r = new FileReader();\r\n    r.onload = function () {\r\n        var DATFILE = new DATPARTOUT(r.result);\r\n        imagesElm.innerHTML = \"\";\r\n        imagesElm.appendChild(imageList(DATFILE));\r\n    };\r\n    r.readAsArrayBuffer(f);\r\n};\r\n","import { ZBufferEntry } from \"./Entries/ZBufferEntry\";\r\nimport { ImageEntry } from \"./Entries/ImageEntry\";\r\nimport { PaletteEntry } from \"./Entries/PaletteEntry\";\r\nimport { FloatTableEntry } from \"./Entries/FloatTableEntry\";\r\n\r\n/**\r\n * @param {ZBufferEntry} entry\r\n */\r\nfunction zBufferImgFromEntry(entry) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var W = entry.width, H = entry.height;\r\n    canvas.width = W;\r\n    canvas.height = H;\r\n    var image = ctx.getImageData(0, 0, W, H);\r\n    var data = image.data;\r\n    for (let i = 0; i < entry.width * entry.height; i++) {\r\n        var index = i * 4;\r\n        var value = (entry.zBuffer[i] / 0xFFFF) * 255;\r\n        data[index + 0] = value;\r\n        data[index + 1] = value;\r\n        data[index + 2] = value;\r\n        data[index + 3] = 255;\r\n    }\r\n    ctx.putImageData(image, 0, 0);\r\n    return canvas;\r\n}\r\n\r\n/**\r\n * @param {ImageEntry} entry\r\n */\r\nfunction paletteImgFromEntry(entry) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    canvas.width = entry.width;\r\n    canvas.height = entry.height;\r\n    ctx.putImageData(entry.imageData, 0, 0);\r\n    return canvas;\r\n}\r\n\r\nconst colors = [\r\n    //\"#000000\",\r\n    //\"#000080\",\r\n    //\"#0000FF\",\r\n    //\"#008000\",\r\n    //\"#008080\",\r\n    \"#0080FF\",\r\n    \"#00FF00\",\r\n    \"#00FF80\",\r\n    \"#00FFFF\",\r\n    //\"#800000\",\r\n    //\"#800080\",\r\n    \"#8000FF\",\r\n    //\"#808000\",\r\n    //\"#808080\",\r\n    \"#8080FF\",\r\n    \"#80FF00\",\r\n    \"#80FF80\",\r\n    \"#80FFFF\",\r\n    \"#FF0000\",\r\n    \"#FF0080\",\r\n    \"#FF00FF\",\r\n    \"#FF8000\",\r\n    \"#FF8080\",\r\n    \"#FF80FF\",\r\n    \"#FFFF00\",\r\n    \"#FFFF80\"\r\n    //\"#FFFFFF\",\r\n];\r\nlet colorCounter = 0;\r\n\r\n/**\r\n * @param {FloatTableEntry} entry \r\n */\r\nfunction addCollisionBox(canvas, entry, counter) {\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    const coords = entry.table.slice(2, 2 + entry.table[1] * 2);\r\n    const scale = 50;\r\n    ctx.translate(canvas.width / 2, canvas.height / 2);\r\n    ctx.fillStyle = colors[colorCounter % colors.length];\r\n    ctx.fillText(counter, -coords[0] * scale, coords[1] * scale);\r\n    ctx.scale(-1, 1);\r\n    ctx.strokeStyle = colors[colorCounter % colors.length];\r\n    ctx.lineWidth = 1;\r\n\r\n    for (let i = 0; i < coords.length - 1; i += 2) {\r\n        ctx.beginPath();\r\n        ctx.arc(coords[i] * scale, coords[i + 1] * scale, 1.5, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    ctx.beginPath();\r\n    if (entry.table[1] == 1) {\r\n        ctx.arc(entry.table[2] * scale, entry.table[3] * scale, entry.table[4] * scale, 0, 2 * Math.PI);\r\n    } else {\r\n        ctx.moveTo(coords[0] * scale, coords[1] * scale);\r\n        for (let i = 2; i < coords.length - 1; i += 2) {\r\n            ctx.lineTo(coords[i] * scale, coords[i + 1] * scale);\r\n        }\r\n    }\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n    colorCounter++;\r\n}\r\n\r\n/**\r\n * @param {FloatTableEntry} entry \r\n */\r\nfunction collisionBoxImgFromEntry(entry) {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const scale = 50;\r\n    const margin = 5;\r\n\r\n    let minX = Number.POSITIVE_INFINITY;\r\n    let maxX = Number.NEGATIVE_INFINITY;\r\n    let minY = Number.POSITIVE_INFINITY;\r\n    let maxY = Number.NEGATIVE_INFINITY;\r\n\r\n    const coords = entry.table.slice(2, 2 + entry.table[1] * 2);\r\n\r\n    if (entry.table[1] == 1) {\r\n        const radius = entry.table[4];\r\n        minX = entry.table[2] - radius;\r\n        maxX = entry.table[2] + radius;\r\n        minY = entry.table[3] - radius;\r\n        maxY = entry.table[3] + radius;\r\n    } else {\r\n        for (let i = 0; i < coords.length; i += 2) {\r\n            if (coords[i] < minX) minX = coords[i];\r\n            if (coords[i] > maxX) maxX = coords[i];\r\n            if (coords[i + 1] < minY) minY = coords[i + 1];\r\n            if (coords[i + 1] > maxY) maxY = coords[i + 1];\r\n        }\r\n    }\r\n\r\n    const width = Math.ceil((maxX - minX) * scale);\r\n    const height = Math.ceil((maxY - minY) * scale);\r\n\r\n    canvas.width = width + margin * 2;\r\n    canvas.height = height + margin * 2;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n    ctx.translate((canvas.width / 2) + (minX * scale) + (width / 2), (canvas.height / 2) - (minY * scale) - (height / 2));\r\n    ctx.scale(-1, 1);\r\n    ctx.strokeStyle = \"#FFFFFF\";\r\n    ctx.fillStyle = \"#FFFFFF\";\r\n    ctx.lineWidth = 1;\r\n\r\n    for (let i = 0; i < coords.length - 1; i += 2) {\r\n        ctx.beginPath();\r\n        ctx.arc(coords[i] * scale, coords[i + 1] * scale, 1.5, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    ctx.beginPath();\r\n    if (entry.table[1] == 1) {\r\n        ctx.arc(entry.table[2] * scale, entry.table[3] * scale, entry.table[4] * scale, 0, 2 * Math.PI);\r\n    } else {\r\n        ctx.moveTo(coords[0] * scale, coords[1] * scale);\r\n        for (let i = 2; i < coords.length - 1; i += 2) {\r\n            ctx.lineTo(coords[i] * scale, coords[i + 1] * scale);\r\n        }\r\n    }\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n\r\n    return canvas;\r\n}\r\n\r\n/**\r\n * @param {PaletteEntry} entry\r\n */\r\nfunction paletteFromEntry(entry) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var colorSize = 10;\r\n    var A = Math.sqrt(entry.colors.length) * colorSize;\r\n    canvas.width = canvas.height = A;\r\n    var image = ctx.getImageData(0, 0, A, A);\r\n    var data = image.data;\r\n    var byte = 0;\r\n    for (var y = A / colorSize; y > 0; y--) for (var x = 0; x < A / colorSize; x++, byte++) {\r\n        var index = (x * colorSize + y * colorSize * A) * 4;\r\n        var color = entry.colors[byte];\r\n        for (var X = 0; X < colorSize; X++) for (var Y = 0; Y < colorSize; Y++) {\r\n            var INDEX = index + (X + Y * A) * 4;\r\n            data[INDEX] = color.r; // RED\r\n            data[INDEX + 1] = color.g; // GREEN\r\n            data[INDEX + 2] = color.b; // BLUE\r\n            data[INDEX + 3] = 255; // ALPHA\r\n        }\r\n    }\r\n    ctx.putImageData(image, 0, 0);\r\n    return canvas;\r\n}\r\n\r\nexport { paletteFromEntry, paletteImgFromEntry, zBufferImgFromEntry, addCollisionBox, collisionBoxImgFromEntry };\r\n"],"names":["$3cf0269be69f9181$export$63e15866ad43b745","constructor","buffer","this","pointer","readNumber","nBytes","advancePointer","bytesToNumber","readBytes","readFloat","ArrayBuffer","view","DataView","bytes","i","setUint8","getFloat32","$7f2dc3919d2d3a67$export$85aeed9c5b57a2c4","reader","nColors","colors","color","b","g","r","$987dfc4d1a87a60c$export$fc5778bfa501e382","dataLength","tableSize","width","height","mp1","mp2","imageSize","imageType","data","imageData","ImageData","zBuffer","readAlphaChannelImage","readImage","padding","Math","ceil","byte","v","u","index","lineSize","dist","currentOffset","maxLine","floor","palette","pI","pExists","c","$20a37dfba56f1d69$export$61c2bc45c7cd727f","length","text","readString","substring","$a0323c402f61d8d4$export$dc9af18610eea11a","fullWidth","unk3","unk4","unk5","push","i1","$64339464e3aa0067$export$9ca3ab0feb73ef72","value","$e481de77f1dbca3c$export$bb3b6f3aabc89910","$c892009c5ae68ec3$export$a764ee1c822e6be1","table","$555a7da346a4306f$export$e6c96a80824d0a08","tableLength","$4a9b2cb24a789ee6$export$9a21b7359fba7738","fileBuffer","dataURI","header","signature","appName","description","fileSize","nGroups","groups","groupID","entryID","nEntries","entry","imageEntries","group","$03860af0ed07013d$var$imageList","file","listElm","document","createElement","forEach","images","message","counter","image","imageElm","canvas","ctx","getContext","putImageData","x","filter","e","st","W","H","getImageData","$b1d1c7d238a217f6$export$44f331575c1ebdaf","title","appendChild","console","log","$03860af0ed07013d$var$fileElm","getElementById","$03860af0ed07013d$var$imagesElm","onchange","f","files","FileReader","DATFILE","result","innerHTML"],"version":3,"file":"imgs.7b0f7aa8.js.map"}