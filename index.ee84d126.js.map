{"mappings":"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","sources":["src/lib/ArrayBufferReader.js","src/lib/Entries/PaletteEntry.js","src/lib/Entries/ImageEntry.js","src/lib/Entries/TextEntry.js","src/lib/Entries/ZBufferEntry.js","src/lib/Entries/ResourceIdentifierEntry.js","src/lib/Entries/DefaultEntry.js","src/lib/Entries/FloatTableEntry.js","src/lib/Entries/IntTableEntry.js","src/lib/DATPARTOUT.js","src/lib/EntryUtils.js","src/lib/index.js"],"sourcesContent":["export class ArrayBufferReader {\r\n    /**\r\n     * Class for reading from an array buffer.\r\n     * @param {ArrayBuffer} buffer The array buffer.\r\n     */\r\n    constructor(buffer) {\r\n        this.buffer = buffer;\r\n        /**\r\n         * @type {Number}\r\n         */\r\n        this.pointer = 0;\r\n    }\r\n\r\n    /**\r\n     * Reads a number from the file.\r\n     * @param {Number} nBytes Number of bytes to read.\r\n     * @param {Boolean} advancePointer Whether to advance the file pointer or not.\r\n     * @returns {Number} The number.\r\n     */\r\n    readNumber(nBytes, advancePointer = true) {\r\n        return this.bytesToNumber(this.readBytes(nBytes, advancePointer));\r\n    }\r\n\r\n    /**\r\n     * Reads a float from the file.\r\n     * @param {Boolean} advancePointer Whether to advance the file pointer or not.\r\n     * @returns {Number} The float.\r\n     */\r\n    readFloat(advancePointer = true) {\r\n        const buffer = new ArrayBuffer(4);\r\n        const view = new DataView(buffer);\r\n        const bytes = this.readBytes(4, advancePointer);\r\n        for (const i in bytes) {\r\n            view.setUint8(i, bytes[i]);\r\n        }\r\n\r\n        return view.getFloat32(0, true);\r\n    }\r\n\r\n    /**\r\n     * Reads a string from the file.\r\n     * @param {Number} nBytes Number of bytes to read.\r\n     * @param {Boolean} advancePointer Whether to advance the file pointer or not.\r\n     * @returns {String} The string.\r\n     */\r\n    readString(nBytes, advancePointer = true) {\r\n        return this.bytesToString(this.readBytes(nBytes, advancePointer));\r\n    }\r\n\r\n    /**\r\n     * Reads bytes from the file.\r\n     * @param {Number} n Number of bytes to read.\r\n     * @param {Boolean} advancePointer Whether to advance the file pointer or not.\r\n     * @returns {Uint8Array} The bytes.\r\n     */\r\n    readBytes(n, advancePointer = true) {\r\n        const data = new Uint8Array(this.buffer.slice(this.pointer, this.pointer + n));\r\n        if (advancePointer) {\r\n            this.pointer += n;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * @param {Uint8Array} bytes\r\n     * @return {Number}\r\n     */\r\n    bytesToNumber(bytes) {\r\n        let result = 0;\r\n\r\n        for (let byte = 0; byte < bytes.length; byte++)\r\n            result += bytes[byte] << byte * 8;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @param {Array<Number>} charCodes\r\n     * @return {String}\r\n     */\r\n    bytesToString(charCodes) {\r\n        let result = \"\";\r\n        for (let i = 0; i < charCodes.length; i++)\r\n            result += String.fromCharCode(charCodes[i]);\r\n        return result;\r\n    }\r\n}\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class PaletteEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    constructor(reader) {\r\n        const nColors = reader.readNumber(4) / 4;\r\n\r\n        /**\r\n         * @type {{r: number, g: number, b: number, a: number}[]}\r\n         */\r\n        this.colors = [];\r\n\r\n        for (let color = 0; color < nColors; color++) {\r\n            this.colors[color] = {};\r\n            this.colors[color].b = reader.readNumber(1);\r\n            this.colors[color].g = reader.readNumber(1);\r\n            this.colors[color].r = reader.readNumber(1);\r\n            this.colors[color].a = reader.readNumber(1);\r\n        }\r\n    }\r\n}\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\nimport { PaletteEntry } from \"./PaletteEntry\";\r\n\r\nexport class ImageEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    constructor(reader) {\r\n        /** @type {Number} */\r\n        this.dataLength = reader.readNumber(4);\r\n        /** @type {Number} */\r\n        this.tableSize = reader.readNumber(1);\r\n        /** @type {Number} */\r\n        this.width = reader.readNumber(2);\r\n        /** @type {Number} */\r\n        this.height = reader.readNumber(2);\r\n        /** @type {Number} */\r\n        this.mp1 = reader.readNumber(2);\r\n        /** @type {Number} */\r\n        this.mp2 = reader.readNumber(2);\r\n        /** @type {Number} */\r\n        this.imageSize = reader.readNumber(4);\r\n        /** @type {Number} */\r\n        this.imageType = reader.readNumber(1);\r\n        /**\r\n         * The palette indexes for each pixel.\r\n         * @type {Uint8Array}\r\n         */\r\n        this.data = [];\r\n        /** @type {ImageData} */\r\n        this.imageData = new ImageData(this.width, this.height);\r\n        /** @type {Number[]} */\r\n        this.zBuffer = [];\r\n\r\n        if (this.imageType === 5) {\r\n            this.readAlphaChannelImage(reader);\r\n        } else {\r\n            this.readImage(reader);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    readImage(reader) {\r\n        const padding = Math.ceil(-((this.height * this.width - this.imageSize) / this.height));\r\n        const data = reader.readBytes(this.imageSize);\r\n\r\n        let byte = 0;\r\n        for (let v = this.height - 1; v >= 0; v--) {\r\n            for (let u = 0; u < this.width; u++, byte++) {\r\n                const index = u + v * this.width;\r\n                this.data[index] = data[byte];\r\n            }\r\n            byte += padding;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    readAlphaChannelImage(reader) {\r\n        const maxLine = this.tableSize == 0 ? 600 : this.tableSize == 1 ? 752 : 960;\r\n\r\n        let currentOffset = 0;\r\n\r\n        while (reader.readNumber(2, false) !== 0xFFFF) {\r\n            currentOffset += reader.readNumber(2);\r\n            const lineSize = reader.readNumber(2);\r\n\r\n            for (let i = 0; i < lineSize; i++) {\r\n                const dist = reader.readNumber(2);\r\n                const color = reader.readNumber(1);\r\n\r\n                const u = currentOffset % maxLine;\r\n                const v = (this.height - 1) - Math.floor(currentOffset / maxLine);\r\n                const index = u + v * this.width;\r\n                this.data[index] = color;\r\n                this.zBuffer[index] = dist;\r\n                currentOffset++;\r\n            }\r\n        }\r\n\r\n        reader.readNumber(2);\r\n    }\r\n\r\n    /**\r\n     * @param {PaletteEntry} palette\r\n     */\r\n    makeImageData(palette) {\r\n        for (const i in this.data) {\r\n            const pI = this.data[i];\r\n            const pExists = typeof pI !== 'undefined';\r\n            const index = i * 4;\r\n            const c = pExists ? palette.colors[pI] : { r: 0, g: 0, b: 0 };\r\n            this.imageData.data[index + 0] = c.r;\r\n            this.imageData.data[index + 1] = c.g;\r\n            this.imageData.data[index + 2] = c.b;\r\n            this.imageData.data[index + 3] = pExists ? 255 : 0;\r\n        }\r\n    }\r\n}\r\n\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class TextEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader \r\n     */\r\n    constructor(reader) {\r\n        const length = reader.readNumber(4);\r\n        this.text = reader.readString(length);\r\n        this.text = this.text.substring(0, length - 1);\r\n    }\r\n}","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class ZBufferEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    constructor(reader) {\r\n        this.dataLength = reader.readNumber(4);\r\n        this.tableSize = reader.readNumber(1);\r\n        this.width = reader.readNumber(2);\r\n        this.height = reader.readNumber(2);\r\n        this.fullWidth = reader.readNumber(2);\r\n        this.unk3 = reader.readNumber(4);\r\n        this.unk4 = reader.readNumber(2);\r\n        this.unk5 = reader.readNumber(2);\r\n        this.zBuffer = [];\r\n\r\n        const data = [];\r\n        for (let i = 0; i < this.fullWidth * this.height; i++) {\r\n            const dist = reader.readNumber(2);\r\n            if (i % this.fullWidth >= this.width) continue;\r\n            data.push(dist);\r\n        }\r\n\r\n        for (const i in data) {\r\n            const u = (i % this.width);\r\n            const v = this.height - 1 - Math.floor(i / this.width);\r\n            const index = v * this.width + u;\r\n\r\n            this.zBuffer.push(data[index]);\r\n        }\r\n    }\r\n}\r\n\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class ResourceIdentifierEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader\r\n     */\r\n    constructor(reader) {\r\n        this.value = reader.readNumber(2);\r\n    }\r\n}","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class DefaultEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader \r\n     */\r\n    constructor(reader) {\r\n        const length = reader.readNumber(4);\r\n        this.data = reader.readBytes(length);\r\n    }\r\n}\r\n","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class FloatTableEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader \r\n     */\r\n    constructor(reader) {\r\n        this.dataLength = reader.readNumber(4);\r\n        /**\r\n         * @type {Number[]}\r\n         */\r\n        this.table = [];\r\n        const tableLength = this.dataLength / 4;\r\n        for (let i = 0; i < tableLength; i++) {\r\n            this.table.push(reader.readFloat());\r\n        }\r\n    }\r\n}","import { ArrayBufferReader } from \"../ArrayBufferReader\";\r\n\r\nexport class IntTableEntry {\r\n    /**\r\n     * @param {ArrayBufferReader} reader \r\n     */\r\n    constructor(reader) {\r\n        this.dataLength = reader.readNumber(4);\r\n        const tableLength = this.dataLength / 2;\r\n        this.table = [];\r\n        for (let i = 0; i < tableLength; i++) {\r\n            this.table.push(reader.readNumber(2));\r\n        }\r\n    }\r\n}","/* Created by Jonas on 05.06.2015. */\r\n\r\nimport { ArrayBufferReader } from './ArrayBufferReader';\r\nimport { ImageEntry } from './Entries/ImageEntry';\r\nimport { PaletteEntry } from './Entries/PaletteEntry';\r\nimport { TextEntry } from './Entries/TextEntry';\r\nimport { ZBufferEntry } from './Entries/ZBufferEntry';\r\nimport { ResourceIdentifierEntry } from './Entries/ResourceIdentifierEntry';\r\nimport { DefaultEntry } from './Entries/DefaultEntry';\r\nimport { FloatTableEntry } from './Entries/FloatTableEntry';\r\nimport { IntTableEntry } from './Entries/IntTableEntry';\r\n\r\nexport class DATPARTOUT {\r\n\r\n    /**\r\n     * Reads a datpartout file.\r\n     * @param {ArrayBuffer} fileBuffer The data.\r\n     * @constructor\r\n     */\r\n    constructor(fileBuffer) {\r\n        this.dataURI = \"\";\r\n        this.header = {\r\n            signature: \"PARTOUT(4.0)RESOURCE\",\r\n            appName: \"\",\r\n            description: \"\",\r\n            fileSize: 0,\r\n            nGroups: 0,\r\n            tableSize: 0,\r\n            fullWidth: 0 // [4 bytes] unknown2 (some small integer, seen values 0 through 25)\r\n        };\r\n\r\n        const reader = new ArrayBufferReader(fileBuffer);\r\n\r\n        /**\r\n         * @type {Array.<Array>}\r\n         */\r\n        this.groups = [];\r\n\r\n        let palette;\r\n\r\n        reader.pointer = 21;\r\n        this.header.appName = reader.readString(50);\r\n        this.header.description = reader.readString(100);\r\n        this.header.fileSize = reader.readNumber(4);\r\n        this.header.nGroups = reader.readNumber(2);\r\n        this.header.tableSize = reader.readNumber(2);\r\n        this.header.fullWidth = reader.readNumber(4);\r\n\r\n        /**\r\n         * @type {{group: Number, entry: Number}[]}\r\n         */\r\n        const imageEntries = [];\r\n\r\n        for (let groupID = 0; groupID < this.header.nGroups; groupID++) {\r\n            const group = [];\r\n            const nEntries = reader.readNumber(1);\r\n            for (let entryID = 0; entryID < nEntries; entryID++) {\r\n                let entry;\r\n                const entryType = reader.readNumber(1);\r\n                switch (entryType) {\r\n                    case 0: // RESOURCE IDENTIFIER\r\n                        entry = new ResourceIdentifierEntry(reader);\r\n                        break;\r\n                    case 1: // IMAGE\r\n                        entry = new ImageEntry(reader);\r\n                        imageEntries.push({ group: groupID, entry: entryID });\r\n                        break;\r\n                    case 5: // PALETTE\r\n                        entry = new PaletteEntry(reader);\r\n                        palette = entry;\r\n                        break;\r\n                    case 3: // TEXT\r\n                    case 9: // TEXT2\r\n                        entry = new TextEntry(reader);\r\n                        break;\r\n                    case 10: // INT TABLE\r\n                        entry = new IntTableEntry(reader);\r\n                        break;\r\n                    case 11: // FLOAT TABLE\r\n                        entry = new FloatTableEntry(reader);\r\n                        break;\r\n                    case 12: // Z BUFFER DATA\r\n                        entry = new ZBufferEntry(reader);\r\n                        break;\r\n                    default:\r\n                        entry = new DefaultEntry(reader);\r\n                        break;\r\n                }\r\n                group.push(entry);\r\n            }\r\n            this.groups.push(group);\r\n        }\r\n\r\n        for (const e of imageEntries) {\r\n            /**\r\n             * @type {ImageEntry}\r\n             */\r\n            const entry = this.groups[e.group][e.entry];\r\n\r\n            entry.makeImageData(palette);\r\n        }\r\n    }\r\n}\r\n","import { ZBufferEntry } from \"./Entries/ZBufferEntry\";\r\nimport { ImageEntry } from \"./Entries/ImageEntry\";\r\nimport { PaletteEntry } from \"./Entries/PaletteEntry\";\r\nimport { FloatTableEntry } from \"./Entries/FloatTableEntry\";\r\n\r\n/**\r\n * @param {ZBufferEntry} entry\r\n */\r\nfunction zBufferImgFromEntry(entry) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var W = entry.width, H = entry.height;\r\n    canvas.width = W;\r\n    canvas.height = H;\r\n    var image = ctx.getImageData(0, 0, W, H);\r\n    var data = image.data;\r\n    for (let i = 0; i < entry.width * entry.height; i++) {\r\n        var index = i * 4;\r\n        var value = (entry.zBuffer[i] / 0xFFFF) * 255;\r\n        data[index + 0] = value;\r\n        data[index + 1] = value;\r\n        data[index + 2] = value;\r\n        data[index + 3] = 255;\r\n    }\r\n    ctx.putImageData(image, 0, 0);\r\n    return canvas;\r\n}\r\n\r\n/**\r\n * @param {ImageEntry} entry\r\n */\r\nfunction paletteImgFromEntry(entry) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    canvas.width = entry.width;\r\n    canvas.height = entry.height;\r\n    ctx.putImageData(entry.imageData, 0, 0);\r\n    return canvas;\r\n}\r\n\r\nconst colors = [\r\n    //\"#000000\",\r\n    //\"#000080\",\r\n    //\"#0000FF\",\r\n    //\"#008000\",\r\n    //\"#008080\",\r\n    \"#0080FF\",\r\n    \"#00FF00\",\r\n    \"#00FF80\",\r\n    \"#00FFFF\",\r\n    //\"#800000\",\r\n    //\"#800080\",\r\n    \"#8000FF\",\r\n    //\"#808000\",\r\n    //\"#808080\",\r\n    \"#8080FF\",\r\n    \"#80FF00\",\r\n    \"#80FF80\",\r\n    \"#80FFFF\",\r\n    \"#FF0000\",\r\n    \"#FF0080\",\r\n    \"#FF00FF\",\r\n    \"#FF8000\",\r\n    \"#FF8080\",\r\n    \"#FF80FF\",\r\n    \"#FFFF00\",\r\n    \"#FFFF80\"\r\n    //\"#FFFFFF\",\r\n];\r\nlet colorCounter = 0;\r\n\r\n/**\r\n * @param {FloatTableEntry} entry \r\n */\r\nfunction addCollisionBox(canvas, entry, counter) {\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    const coords = entry.table.slice(2, 2 + entry.table[1] * 2);\r\n    const scale = 50;\r\n    ctx.translate(canvas.width / 2, canvas.height / 2);\r\n    ctx.fillStyle = colors[colorCounter % colors.length];\r\n    ctx.fillText(counter, -coords[0] * scale, coords[1] * scale);\r\n    ctx.scale(-1, 1);\r\n    ctx.strokeStyle = colors[colorCounter % colors.length];\r\n    ctx.lineWidth = 1;\r\n\r\n    for (let i = 0; i < coords.length - 1; i += 2) {\r\n        ctx.beginPath();\r\n        ctx.arc(coords[i] * scale, coords[i + 1] * scale, 1.5, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    ctx.beginPath();\r\n    if (entry.table[1] == 1) {\r\n        ctx.arc(entry.table[2] * scale, entry.table[3] * scale, entry.table[4] * scale, 0, 2 * Math.PI);\r\n    } else {\r\n        ctx.moveTo(coords[0] * scale, coords[1] * scale);\r\n        for (let i = 2; i < coords.length - 1; i += 2) {\r\n            ctx.lineTo(coords[i] * scale, coords[i + 1] * scale);\r\n        }\r\n    }\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n    colorCounter++;\r\n}\r\n\r\n/**\r\n * @param {FloatTableEntry} entry \r\n */\r\nfunction collisionBoxImgFromEntry(entry) {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const scale = 50;\r\n    const margin = 5;\r\n\r\n    let minX = Number.POSITIVE_INFINITY;\r\n    let maxX = Number.NEGATIVE_INFINITY;\r\n    let minY = Number.POSITIVE_INFINITY;\r\n    let maxY = Number.NEGATIVE_INFINITY;\r\n\r\n    const coords = entry.table.slice(2, 2 + entry.table[1] * 2);\r\n\r\n    if (entry.table[1] == 1) {\r\n        const radius = entry.table[4];\r\n        minX = entry.table[2] - radius;\r\n        maxX = entry.table[2] + radius;\r\n        minY = entry.table[3] - radius;\r\n        maxY = entry.table[3] + radius;\r\n    } else {\r\n        for (let i = 0; i < coords.length; i += 2) {\r\n            if (coords[i] < minX) minX = coords[i];\r\n            if (coords[i] > maxX) maxX = coords[i];\r\n            if (coords[i + 1] < minY) minY = coords[i + 1];\r\n            if (coords[i + 1] > maxY) maxY = coords[i + 1];\r\n        }\r\n    }\r\n\r\n    const width = Math.ceil((maxX - minX) * scale);\r\n    const height = Math.ceil((maxY - minY) * scale);\r\n\r\n    canvas.width = width + margin * 2;\r\n    canvas.height = height + margin * 2;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n    ctx.translate((canvas.width / 2) + (minX * scale) + (width / 2), (canvas.height / 2) - (minY * scale) - (height / 2));\r\n    ctx.scale(-1, 1);\r\n    ctx.strokeStyle = \"#FFFFFF\";\r\n    ctx.fillStyle = \"#FFFFFF\";\r\n    ctx.lineWidth = 1;\r\n\r\n    for (let i = 0; i < coords.length - 1; i += 2) {\r\n        ctx.beginPath();\r\n        ctx.arc(coords[i] * scale, coords[i + 1] * scale, 1.5, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    ctx.beginPath();\r\n    if (entry.table[1] == 1) {\r\n        ctx.arc(entry.table[2] * scale, entry.table[3] * scale, entry.table[4] * scale, 0, 2 * Math.PI);\r\n    } else {\r\n        ctx.moveTo(coords[0] * scale, coords[1] * scale);\r\n        for (let i = 2; i < coords.length - 1; i += 2) {\r\n            ctx.lineTo(coords[i] * scale, coords[i + 1] * scale);\r\n        }\r\n    }\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n\r\n    return canvas;\r\n}\r\n\r\n/**\r\n * @param {PaletteEntry} entry\r\n */\r\nfunction paletteFromEntry(entry) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var colorSize = 10;\r\n    var A = Math.sqrt(entry.colors.length) * colorSize;\r\n    canvas.width = canvas.height = A;\r\n    var image = ctx.getImageData(0, 0, A, A);\r\n    var data = image.data;\r\n    var byte = 0;\r\n    for (var y = A / colorSize; y > 0; y--) for (var x = 0; x < A / colorSize; x++, byte++) {\r\n        var index = (x * colorSize + y * colorSize * A) * 4;\r\n        var color = entry.colors[byte];\r\n        for (var X = 0; X < colorSize; X++) for (var Y = 0; Y < colorSize; Y++) {\r\n            var INDEX = index + (X + Y * A) * 4;\r\n            data[INDEX] = color.r; // RED\r\n            data[INDEX + 1] = color.g; // GREEN\r\n            data[INDEX + 2] = color.b; // BLUE\r\n            data[INDEX + 3] = 255; // ALPHA\r\n        }\r\n    }\r\n    ctx.putImageData(image, 0, 0);\r\n    return canvas;\r\n}\r\n\r\nexport { paletteFromEntry, paletteImgFromEntry, zBufferImgFromEntry, addCollisionBox, collisionBoxImgFromEntry };\r\n","/* Created by jonas on 07.04.2017. */\r\n\r\nimport { DATPARTOUT } from \"./DATPARTOUT\";\r\nimport * as EntryUtils from \"./EntryUtils\";\r\nimport { ResourceIdentifierEntry } from \"./Entries/ResourceIdentifierEntry\";\r\nimport { ImageEntry } from \"./Entries/ImageEntry\";\r\nimport { TextEntry } from \"./Entries/TextEntry\";\r\nimport { PaletteEntry } from \"./Entries/PaletteEntry\";\r\nimport { ZBufferEntry } from \"./Entries/ZBufferEntry\";\r\nimport { FloatTableEntry } from \"./Entries/FloatTableEntry\";\r\nimport { IntTableEntry } from \"./Entries/IntTableEntry\";\r\n\r\n/**\r\n * \r\n * @param {DATPARTOUT} file \r\n */\r\nfunction makeDAT(file) {\r\n    var images = [];\r\n    var zBuffers = [];\r\n    var elmContainer = \"ul\";\r\n    var elmItem = \"li\";\r\n    var groupListElm = document.createElement(elmContainer);\r\n    var collisionElm = document.createElement(\"canvas\");\r\n    collisionElm.style.border = \"1px solid white\";\r\n    collisionElm.width = (30 + 2) * 50;\r\n    collisionElm.height = (30 + 2) * 50;\r\n    var ctx = collisionElm.getContext(\"2d\");\r\n    //ctx.fillStyle = \"black\";\r\n    //ctx.fillRect(0, 0, collisionElm.width, collisionElm.height);\r\n    document.body.appendChild(collisionElm);\r\n    let collisionCounter = 1;\r\n\r\n    for (var groupID = 0; groupID < file.groups.length; groupID++) {\r\n        var group = file.groups[groupID];\r\n        var groupElm = document.createElement(elmItem);\r\n        var groupLinkElm = document.createElement(\"a\");\r\n\r\n        groupLinkElm.name = groupID + \"\";\r\n        groupElm.innerHTML = \"Group \" + groupID + \" <span class='base0C'>[\" + group.length + \" Entr\" + (group.length === 1 ? \"y\" : \"ies\") + \"]</span>\";\r\n        groupElm.appendChild(groupLinkElm);\r\n        groupListElm.appendChild(groupElm);\r\n\r\n        var entryListElm = document.createElement(elmContainer);\r\n        groupElm.appendChild(entryListElm);\r\n\r\n        if (group.length <= 0) { continue; }\r\n\r\n        for (var entryID = 0; entryID < group.length; entryID++) {\r\n            var entry = group[entryID];\r\n            var entryElm = document.createElement(elmItem);\r\n\r\n            var entryType = type(entry);\r\n            entryElm.innerHTML = \"Entry \" + entryID + \", Type: (<span class='\" + entryType.color + \"'>\" + entryType.name + \"</span>)\";\r\n            entryListElm.appendChild(entryElm);\r\n\r\n            var dataListElm = document.createElement(elmContainer);\r\n            entryElm.appendChild(dataListElm);\r\n\r\n            // List data\r\n            if (entry instanceof ResourceIdentifierEntry) {\r\n                createElement(elmItem, dataListElm, entry.value);\r\n            } else if (entry instanceof ImageEntry) {\r\n                createElement(elmItem, dataListElm, \"Width: \" + entry.width + \"px\");\r\n                createElement(elmItem, dataListElm, \"Height: \" + entry.height + \"px\");\r\n                createElement(elmItem, dataListElm, \"Table Size: \" + entry.tableSize);\r\n                createElement(elmItem, dataListElm, \"Multi-Purpose 1: \" + entry.mp1);\r\n                createElement(elmItem, dataListElm, \"Multi-Purpose 2: \" + entry.mp2);\r\n                images.push({\r\n                    elm: createElement(elmItem, dataListElm, \"\"),\r\n                    group: groupID,\r\n                    entry: entryID\r\n                });\r\n            } else if (entry instanceof TextEntry) {\r\n                createElement(elmItem, dataListElm, \"<div class='container'>\" + entry.text + \"</div>\");\r\n            } else if (entry instanceof PaletteEntry) {\r\n                //palFile = new PAL(entry.data.colors);\r\n                dataListElm.appendChild(EntryUtils.paletteFromEntry(entry));\r\n            } else if (entry instanceof FloatTableEntry) {\r\n                createElement(elmItem, dataListElm, `Elements: ${entry.table.length}`);\r\n                createElement(elmItem, dataListElm, entry.table.join(\", \"));\r\n                if (entry.table[0] == 600 /*|| entry.table[0] == 1300*/) {\r\n                    createElement(elmItem, dataListElm, `collisionCounter: ${collisionCounter}`);\r\n                    EntryUtils.addCollisionBox(collisionElm, entry, collisionCounter);\r\n                    const cBoxImg = EntryUtils.collisionBoxImgFromEntry(entry);\r\n                    const elm = createElement(elmItem, dataListElm, \"\");\r\n                    elm.appendChild(cBoxImg);\r\n                    collisionCounter++;\r\n                }\r\n            } else if (entry instanceof IntTableEntry) {\r\n                createElement(elmItem, dataListElm, `Elements: ${entry.table.length}`);\r\n                createElement(elmItem, dataListElm, entry.table.join(\", \"));\r\n            } else if (entry instanceof ZBufferEntry) {\r\n                createElement(elmItem, dataListElm, \"Width: \" + entry.width + \"px\");\r\n                createElement(elmItem, dataListElm, \"Height: \" + entry.height + \"px\");\r\n                zBuffers.push({\r\n                    elm: createElement(elmItem, dataListElm, \"\"),\r\n                    group: groupID,\r\n                    entry: entryID\r\n                });\r\n            } else {\r\n                createElement(elmItem, dataListElm, \"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    images.forEach(function (img) {\r\n        var entry = file.groups[img.group][img.entry];\r\n        var image = EntryUtils.paletteImgFromEntry(entry);\r\n        image.title = `${img.group}-${img.entry}`;\r\n        if (entry.width > 0 && entry.height > 0) {\r\n            img.elm.appendChild(image);\r\n        }\r\n    });\r\n\r\n    zBuffers.forEach(function (zBuffer) {\r\n        var entry = file.groups[zBuffer.group][zBuffer.entry];\r\n        var image = EntryUtils.zBufferImgFromEntry(entry);\r\n        image.title = `${zBuffer.group}-${zBuffer.entry}`;\r\n        if (entry.width > 0 && entry.height > 0) {\r\n            zBuffer.elm.appendChild(image);\r\n        }\r\n    });\r\n\r\n    return groupListElm;\r\n}\r\n\r\nfunction type(entry) {\r\n    if (entry instanceof ResourceIdentifierEntry) {\r\n        return { name: \"RESOURCE IDENTIFIER\", color: 'base08' };\r\n    } else if (entry instanceof ImageEntry) {\r\n        return { name: \"IMAGE\", color: 'base09' };\r\n    } else if (entry instanceof TextEntry) {\r\n        return { name: \"TEXT\", color: 'base0A' };\r\n    } else if (entry instanceof PaletteEntry) {\r\n        return { name: \"PALETTE\", color: 'base0B' };\r\n    } else if (entry instanceof IntTableEntry) {\r\n        return { name: \"INT TABLE\", color: 'base0E' };\r\n    } else if (entry instanceof FloatTableEntry) {\r\n        return { name: \"FLOAT TABLE\", color: 'base0C' };\r\n    } else if (entry instanceof ZBufferEntry) {\r\n        return { name: \"Z BUFFER DATA\", color: 'base0D' };\r\n    } else {\r\n        return { name: \"UNKNOWN\", color: 'base04' };\r\n    }\r\n\r\n    // case 11: return { name: \"CAMERA DATA\", color: 'base0C' };\r\n}\r\n\r\n/**\r\n * Create a DOM element.\r\n * @param {String} tag The tag name.\r\n * @param {HTMLElement} parent Element to add the element to.\r\n * @param {String} innerHTML HTML content of the element.\r\n * @returns {HTMLElement} The element.\r\n */\r\nfunction createElement(tag, parent, innerHTML) {\r\n    var element = document.createElement(tag);\r\n    element.innerHTML = innerHTML;\r\n    parent.appendChild(element);\r\n    return element;\r\n}\r\n\r\nvar fileElm = document.getElementById(\"file\");\r\n\r\nfileElm.onchange = function () {\r\n    var f = fileElm.files[0],\r\n        r = new FileReader();\r\n    r.onload = function () {\r\n        var DATFILE = new DATPARTOUT(r.result);\r\n        document.body.appendChild(makeDAT(DATFILE));\r\n    };\r\n    r.readAsArrayBuffer(f);\r\n};\r\n"],"names":["$3cf0269be69f9181$export$63e15866ad43b745","constructor","buffer","this","pointer","readNumber","nBytes","advancePointer","bytesToNumber","readBytes","readFloat","ArrayBuffer","view","DataView","bytes","i","setUint8","getFloat32","$7f2dc3919d2d3a67$export$85aeed9c5b57a2c4","reader","nColors","colors","color","b","g","r","$987dfc4d1a87a60c$export$fc5778bfa501e382","dataLength","tableSize","width","height","mp1","mp2","imageSize","imageType","data","imageData","ImageData","zBuffer","readAlphaChannelImage","readImage","padding","Math","ceil","byte","v","u","index","lineSize","dist","currentOffset","maxLine","floor","palette","pI","pExists","c","$20a37dfba56f1d69$export$61c2bc45c7cd727f","length","text","readString","substring","$a0323c402f61d8d4$export$dc9af18610eea11a","fullWidth","unk3","unk4","unk5","push","i1","$64339464e3aa0067$export$9ca3ab0feb73ef72","value","$e481de77f1dbca3c$export$bb3b6f3aabc89910","$c892009c5ae68ec3$export$a764ee1c822e6be1","table","$555a7da346a4306f$export$e6c96a80824d0a08","tableLength","$4a9b2cb24a789ee6$export$9a21b7359fba7738","fileBuffer","dataURI","header","signature","appName","description","fileSize","nGroups","groups","groupID","entryID","nEntries","entry","imageEntries","group","$b1d1c7d238a217f6$var$colors","$b1d1c7d238a217f6$var$colorCounter","$b1d1c7d238a217f6$export$362fa136957ed9f1","canvas","counter","ctx","getContext","setTransform","coords","slice","scale","translate","fillStyle","fillText","strokeStyle","lineWidth","beginPath","arc","PI","closePath","fill","moveTo","lineTo","stroke","$b1d1c7d238a217f6$export$96606c893494bafb","document","createElement","minX","Number","POSITIVE_INFINITY","maxX","NEGATIVE_INFINITY","minY","maxY","radius","margin","i2","$b1d1c7d238a217f6$export$9c7a2d95a80568e3","sqrt","colorSize","A","getImageData","image","y","x","X","Y","$1f69e5e4f608a8a1$var$makeDAT","file","images","zBuffers","elmContainer","elmItem","groupListElm","collisionElm","style","border","body","appendChild","collisionCounter","groupElm","groupLinkElm","name","innerHTML","entryListElm","entryElm","entryType","$1f69e5e4f608a8a1$var$type","dataListElm","$1f69e5e4f608a8a1$var$createElement","elm","join","cBoxImg","forEach","img","putImageData","$b1d1c7d238a217f6$export$58336781c4f3eff7","title","W","H","$b1d1c7d238a217f6$export$44f331575c1ebdaf","tag","parent","element"],"version":3,"file":"index.ee84d126.js.map"}